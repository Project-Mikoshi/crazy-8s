[INFO] Scanning for projects...
[INFO] 
[INFO] ----------------------< scs.comp4004:assignment3 >----------------------
[INFO] Building assignment3 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- frontend-maven-plugin:1.12.1:install-node-and-npm (install node and npm) @ assignment3 ---
[INFO] Node v16.10.0 is already installed.
[INFO] NPM 7.24.0 is already installed.
[INFO] 
[INFO] --- frontend-maven-plugin:1.12.1:npm (install dependencies) @ assignment3 ---
[INFO] Running 'npm install' in /Users/anthony/workspace/4004-F22-A3-101128194/client
[INFO] 
[INFO] up to date, audited 410 packages in 583ms
[INFO] 
[INFO] 108 packages are looking for funding
[INFO]   run `npm fund` for details
[INFO] 
[INFO] found 0 vulnerabilities
[INFO] 
[INFO] --- maven-resources-plugin:3.3.0:resources (default-resources) @ assignment3 ---
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ assignment3 ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- frontend-maven-plugin:1.12.1:npm (bundle ui package) @ assignment3 ---
[INFO] Running 'npm run build' in /Users/anthony/workspace/4004-F22-A3-101128194/client
[INFO] 
[INFO] > crazy8s-ui@0.0.1 build
[INFO] > vite build
[INFO] 
[INFO] vite v3.2.4 building for production...
[INFO] transforming...
[INFO] [BABEL] Note: The code generator has deoptimised the styling of /Users/anthony/workspace/4004-F22-A3-101128194/client/node_modules/@mikoshi/application-components/dist/index.js as it exceeds the max of 500KB.
[INFO] [BABEL] Note: The code generator has deoptimised the styling of /Users/anthony/workspace/4004-F22-A3-101128194/client/node_modules/@mikoshi/core-components/dist/index.js as it exceeds the max of 500KB.
[INFO] âœ“ 1056 modules transformed.
[INFO] rendering chunks...
[INFO] dist/index.html                  0.59 KiB
[INFO] dist/assets/index.39cd6f06.js    118.55 KiB / gzip: 51.28 KiB
[INFO] dist/assets/index.b5f43a3a.css   933.68 KiB / gzip: 555.94 KiB
[INFO] dist/assets/vendor.75aed426.js   2294.99 KiB / gzip: 593.86 KiB
[INFO] dist/assets/vendor.75aed426.js   2294.99 KiB / gzip: 593.86 KiB
[INFO] (!) Some chunks are larger than 500 KiB after minification. Consider:
[INFO] - Using dynamic import() to code-split the application
[INFO] - Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/guide/en/#outputmanualchunks
[INFO] - Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
[INFO] 
[INFO] --- maven-resources-plugin:3.3.0:copy-resources (position-react-build) @ assignment3 ---
[INFO] Copying 6 resources
[INFO] 
[INFO] --- maven-resources-plugin:3.3.0:testResources (default-testResources) @ assignment3 ---
[INFO] Copying 8 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ assignment3 ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:3.0.0-M7:test (default-test) @ assignment3 ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running unit.GameUtilTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in unit.GameUtilTest
[INFO] Running acceptance.CucumberTest

Scenario: 67                                           # features/2-card.feature:7
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 2-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 2-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-H |
  Then player 2 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 2 draw and get 6-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 9-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 6-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then top of discard pile is now 6-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)

Scenario: 68                                           # features/2-card.feature:19
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 2-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 2-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-H |
  Then player 2 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 2 draw and get 6-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 9-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 2 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 2 draw and get 9-H                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 6-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 2 must play a card                       # acceptance.StepDefinitions.checkPlayingCard(int)
  And from existing cards, player 2 plays 6-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then top of discard pile is now 6-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)

Scenario: 69                                           # features/2-card.feature:35
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 2-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 2-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-H |
  Then player 2 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 2 draw and get 6-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 9-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 2 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 2 draw and get 9-H                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 7-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 5-H                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 2 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)

Scenario: 70-71                                        # features/2-card.feature:50
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 2-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 2-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-H |
  Then player 2 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 2 draw and get 2-H                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 9-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 2-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 2 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)
  Then top of discard pile is now 2-H                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 3 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 7-D |
  Then player 3 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 3 draw and get 5-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 3 draw and get 6-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 3 draw and get 6-H                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 3 draw and get 7-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 6-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 3 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)
  Then top of discard pile is now 6-H                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)

Scenario: 72                                           # features/2-card.feature:73
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 2-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 2-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-C |
    | 6-C |
    | 9-D |
  And from existing cards, player 2 plays 4-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 6-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 2 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)

Scenario: 73                                           # features/2-card.feature:85
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  And player 1 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | A-C |
    | 2-C |
  And from existing cards, player 1 plays 2-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then top of discard pile is now 2-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-C |
    | 6-C |
  And from existing cards, player 2 plays 4-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 6-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then game round advanced to 2                        # acceptance.StepDefinitions.checkGameRound(int)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 51                                           # features/card-playability.feature:7
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is K-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 3-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 3-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)

Scenario: 52                                           # features/card-playability.feature:12
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is K-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 7-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now 7-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)

Scenario: 53                                           # features/card-playability.feature:17
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is K-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 8-H with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then player 1 is prompted to chose a suit            # acceptance.StepDefinitions.checkForModalPrompt(int)

Scenario: 54                                           # features/card-playability.feature:22
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is K-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 try to play 5-S with failure           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then top of discard pile is now K-C                  # acceptance.StepDefinitions.checkTopCard(java.lang.String,java.lang.String)

Scenario: 81-147                                       # features/complete-game.feature:7
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 4-D                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  And player 1 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-H |
    | 7-S |
    | 5-D |
    | 6-D |
    | 9-D |
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-S  |
    | 6-S  |
    | K-C  |
    | 8-H  |
    | 10-D |
  And player 3 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 9-S |
    | 6-C |
    | 9-C |
    | J-D |
    | 3-H |
  And player 4 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 7-D |
    | J-H |
    | Q-H |
    | K-H |
    | 5-C |
  And from existing cards, player 1 plays 4-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 4-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 9-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 4 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 4 draw and get 2-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 4 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 4 draw and get 3-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 4 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 4 draw and get 4-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 4 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)
  And from existing cards, player 1 plays 7-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 6-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 6-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays 2-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  And player 1 draw and get 10-C                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 1 draw and get J-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 1 plays J-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays K-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 9-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays 3-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And player 1 draw and get 7-C                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 1 plays 7-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 8-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 2 is prompted to chose a suit            # acceptance.StepDefinitions.checkForModalPrompt(int)
  And player 2 choose 8-D from the prompt              # acceptance.StepDefinitions.chooseSuit(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays J-D          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays 7-D          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 1 plays 9-D          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 10-D         # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 1 scores is 21                           # acceptance.StepDefinitions.checkScores(int,int)
  Then player 2 scores is 0                            # acceptance.StepDefinitions.checkScores(int,int)
  Then player 3 scores is 3                            # acceptance.StepDefinitions.checkScores(int,int)
  Then player 4 scores is 39                           # acceptance.StepDefinitions.checkScores(int,int)
  Then game round advanced to 2                        # acceptance.StepDefinitions.checkGameRound(int)
  Given top card is 10-D                               # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  And player 1 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 7-D |
    | 4-S |
    | 7-C |
    | 4-H |
    | 5-D |
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 9-D |
    | 3-S |
    | 9-C |
    | 3-H |
    | J-C |
  And player 3 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-D |
    | 9-S |
    | 3-C |
    | 9-H |
    | 5-H |
  And player 4 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 4-D |
    | 7-S |
    | 4-C |
    | 5-S |
    | 8-D |
  And from existing cards, player 2 plays 9-D          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 3-D          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays 4-D          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 1 plays 4-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 3-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 9-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays 7-S          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 1 plays 7-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 9-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 3-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays 4-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 1 plays 4-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 2 plays 3-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 9-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And player 4 draw and get K-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 4 draw and get Q-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 4 draw and get K-H                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 4 plays K-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  And player 1 draw and get 6-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 1 draw and get Q-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 1 draw and get J-D                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 6-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get J-S                        # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And player 2 draw and get 10-S                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  And from existing cards, player 3 plays 5-H          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 1 scores is 59                           # acceptance.StepDefinitions.checkScores(int,int)
  Then player 2 scores is 36                           # acceptance.StepDefinitions.checkScores(int,int)
  Then player 3 scores is 3                            # acceptance.StepDefinitions.checkScores(int,int)
  Then player 4 scores is 114                          # acceptance.StepDefinitions.checkScores(int,int)
  Then game is over with player 3 being the winner     # acceptance.StepDefinitions.checkGameOver(int)

Scenario: 58                                           # features/drawing-rule.feature:7
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 has following cards:                   # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-H |
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 6-C                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must play a card                       # acceptance.StepDefinitions.checkPlayingCard(int)

Scenario: 59                                           # features/drawing-rule.feature:15
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 has following cards:                   # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-H |
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 6-D                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 5-C                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must play a card                       # acceptance.StepDefinitions.checkPlayingCard(int)

Scenario: 60                                           # features/drawing-rule.feature:25
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 has following cards:                   # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-H |
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 6-D                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 5-S                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 7-H                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must play a card                       # acceptance.StepDefinitions.checkPlayingCard(int)

Scenario: 61                                           # features/drawing-rule.feature:37
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 has following cards:                   # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-H |
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 6-D                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 5-S                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 4-H                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)

Scenario: 62                                           # features/drawing-rule.feature:49
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 has following cards:                   # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-H |
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 6-D                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must draw                              # acceptance.StepDefinitions.checkDrawButton(int)
  When player 1 draw and get 8-H                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must play a card                       # acceptance.StepDefinitions.checkPlayingCard(int)
  When player 1 try to play 8-H with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then player 1 is prompted to chose a suit            # acceptance.StepDefinitions.checkForModalPrompt(int)

Scenario: 63                                           # features/drawing-rule.feature:61
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  When player 1 has following cards:                   # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 3-C |
    | K-S |
  When player 1 draw and get 6-C                       # acceptance.StepDefinitions.playerDrawAndHasCards(int,java.lang.String,java.lang.String)
  Then player 1 must play a card                       # acceptance.StepDefinitions.checkPlayingCard(int)
  When player 1 try to play 6-C with success           # acceptance.StepDefinitions.playerAttemptPlayCard(int,java.lang.String,java.lang.String,boolean)
  Then player 1 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)

Scenario: 41                                           # features/playing-order.feature:7
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  When player 1 plays 3-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 42-43                                        # features/playing-order.feature:11
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  When player 1 plays A-H                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 4                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  Then game is playing in opposite direction           # acceptance.StepDefinitions.checkGameDirection(java.lang.String)
  When player 4 plays 7-H                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 3                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 44                                           # features/playing-order.feature:18
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  When player 1 plays Q-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 3                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 45                                           # features/playing-order.feature:22
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  When player 1 plays 3-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 2 plays 4-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 3                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 3 plays 5-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 4                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 4 plays 3-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 1                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 46-47                                        # features/playing-order.feature:32
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  When player 1 plays 3-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 2 plays 4-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 3                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 3 plays 5-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 4                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 4 plays A-H                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then game is playing in opposite direction           # acceptance.StepDefinitions.checkGameDirection(java.lang.String)
  Then next player is player 3                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 3 plays 7-H                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 48                                           # features/playing-order.feature:45
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  When player 1 plays 3-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 2 plays 4-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 3                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 3 plays 5-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 4                         # acceptance.StepDefinitions.checkPlayerOrder(int)
  When player 4 plays Q-C                              # acceptance.StepDefinitions.playerPlayCard(int,java.lang.String,java.lang.String)
  Then next player is player 2                         # acceptance.StepDefinitions.checkPlayerOrder(int)

Scenario: 77-78                                        # features/single-round-scoring.feature:7
  Given there are 4 players                            # acceptance.StepDefinitions.startGame(int)
  And all player joined the game room and game started # acceptance.StepDefinitions.joinGameRoom()
  Given top card is 7-C                                # acceptance.StepDefinitions.changeCardOnTopOfDiscardedPile(java.lang.String,java.lang.String)
  And player 1 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 7-C |
    | A-S |
  And player 2 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 7-C |
  And player 3 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 8-H |
    | J-H |
    | 6-H |
    | K-H |
    | K-S |
  And player 4 has following cards:                    # acceptance.StepDefinitions.playerHasCards(int,java.util.List<java.lang.String>)
    | 8-C |
    | 8-D |
    | 2-D |
  And from existing cards, player 1 plays 7-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 1 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)
  And from existing cards, player 2 plays 7-C          # acceptance.StepDefinitions.playerPlayFromExistingCard(int,java.lang.String,java.lang.String)
  Then player 2 turn ended                             # acceptance.StepDefinitions.checkPlayerTurnEnded(int)
  Then player 1 scores is 1                            # acceptance.StepDefinitions.checkScores(int,int)
  Then player 2 scores is 0                            # acceptance.StepDefinitions.checkScores(int,int)
  Then player 3 scores is 86                           # acceptance.StepDefinitions.checkScores(int,int)
  Then player 4 scores is 102                          # acceptance.StepDefinitions.checkScores(int,int)
  Then game is over with player 2 being the winner     # acceptance.StepDefinitions.checkGameOver(int)
[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 235.587 s - in acceptance.CucumberTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 30, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  04:10 min
[INFO] Finished at: 2022-11-26T20:43:08-05:00
[INFO] ------------------------------------------------------------------------
